<!-- livebook:{"persist_outputs":true} -->

# Kino OpenAI

```elixir
Mix.install(
  [
    {:kino_openai, path: "/Users/rakshan/projects/elixir/smartcells/kino_openai"},
    {:kino_slack, "~> 0.1.0"}
  ],
  force: true
)
```

<!-- livebook:{"output":true} -->

```
Resolving Hex dependencies...
Resolution completed in 0.191s
New:
  castore 0.1.22
  certifi 2.9.0
  file_system 0.2.10
  finch 0.14.0
  hackney 1.18.1
  hpax 0.1.2
  httpoison 1.8.2
  idna 6.1.1
  jason 1.4.0
  json 1.4.1
  kino 0.8.1
  kino_slack 0.1.0
  meck 0.9.2
  metrics 1.0.1
  mime 2.0.3
  mimerl 1.2.0
  mint 1.5.0
  mix_test_watch 1.1.0
  mock 0.3.7
  nimble_options 0.5.2
  nimble_pool 0.2.6
  openai 0.2.3
  parse_trans 3.3.1
  req 0.3.5
  ssl_verify_fun 1.1.6
  table 0.1.2
  telemetry 1.2.1
  unicode_util_compat 0.7.0
* Getting kino_slack (Hex package)
* Getting kino (Hex package)
* Getting req (Hex package)
* Getting finch (Hex package)
* Getting jason (Hex package)
* Getting mime (Hex package)
* Getting castore (Hex package)
* Getting mint (Hex package)
* Getting nimble_options (Hex package)
* Getting nimble_pool (Hex package)
* Getting telemetry (Hex package)
* Getting hpax (Hex package)
* Getting table (Hex package)
* Getting openai (Hex package)
* Getting httpoison (Hex package)
* Getting json (Hex package)
* Getting mix_test_watch (Hex package)
* Getting mock (Hex package)
* Getting meck (Hex package)
* Getting file_system (Hex package)
* Getting hackney (Hex package)
* Getting certifi (Hex package)
* Getting idna (Hex package)
* Getting metrics (Hex package)
* Getting mimerl (Hex package)
* Getting parse_trans (Hex package)
* Getting ssl_verify_fun (Hex package)
* Getting unicode_util_compat (Hex package)

12:52:53.232 [info] Compiling file system watcher for Mac...

12:52:54.129 [info] Done.
==> file_system
Compiling 7 files (.ex)
Generated file_system app
==> table
Compiling 5 files (.ex)
Generated table app
==> mime
Compiling 1 file (.ex)
Generated mime app
==> nimble_options
Compiling 3 files (.ex)
Generated nimble_options app
==> kino
Compiling 37 files (.ex)
Generated kino app
===> Analyzing applications...
===> Compiling unicode_util_compat
===> Analyzing applications...
===> Compiling idna
===> Analyzing applications...
===> Compiling telemetry
==> jason
Compiling 10 files (.ex)
Generated jason app
==> json
Compiling 13 files (.ex)
warning: use Bitwise is deprecated. import Bitwise instead
  lib/json/parser/string.ex:8: JSON.Parser.String

warning: use Bitwise is deprecated. import Bitwise instead
  lib/json/parser/unicode.ex:6: JSON.Parser.Unicode

Generated json app
==> mix_test_watch
Compiling 8 files (.ex)
Generated mix_test_watch app
==> hpax
Compiling 4 files (.ex)
Generated hpax app
===> Analyzing applications...
===> Compiling mimerl
===> Analyzing applications...
===> Compiling meck
==> mock
Compiling 1 file (.ex)
Generated mock app
==> ssl_verify_fun
Compiling 7 files (.erl)
Generated ssl_verify_fun app
===> Analyzing applications...
===> Compiling certifi
===> Analyzing applications...
===> Compiling parse_trans
==> nimble_pool
Compiling 2 files (.ex)
Generated nimble_pool app
===> Analyzing applications...
===> Compiling metrics
===> Analyzing applications...
===> Compiling hackney
==> castore
Compiling 1 file (.ex)
Generated castore app
==> mint
Compiling 1 file (.erl)
Compiling 19 files (.ex)
Generated mint app
==> finch
Compiling 13 files (.ex)
Generated finch app
==> req
Compiling 5 files (.ex)
Generated req app
==> kino_slack
Compiling 2 files (.ex)
Generated kino_slack app
==> httpoison
Compiling 3 files (.ex)
Generated httpoison app
==> openai
Compiling 12 files (.ex)
Generated openai app
==> kino_openai
Compiling 2 files (.ex)
warning: variable "opts" is unused (if the variable is not meant to be used, prefix it with an underscore)
  lib/kino_openai/task_cell.ex:134: KinoOpenAi.TaskCell.to_quoted/1

Generated kino_openai app
```

<!-- livebook:{"output":true} -->

```
:ok
```

## OpenAI

<!-- livebook:{"attrs":{},"chunks":[[0,101],[103,701]],"kind":"Elixir.KinoOpenAi.TaskCell","livebook_object":"smart_cell"} -->

```elixir
Application.put_env(
  :openai,
  :api_key,
  "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"
)

text_input = Kino.Input.textarea("Text", default: "Yesterday, I was reading a book and")
form = Kino.Control.form([text: text_input], submit: "Run")
frame = Kino.Frame.new()

form
|> Kino.Control.stream()
|> Kino.listen(fn %{data: %{text: text}} ->
  Kino.Frame.render(frame, Kino.Markdown.new("Running..."))

  case OpenAI.completions("text-davinci-003", prompt: text, max_tokens: 150) do
    {:ok, result} ->
      t = result |> Map.get(:choices) |> Enum.at(0) |> Map.get("text")
      Kino.Frame.render(frame, Kino.Markdown.new(t))

    {:error, error} ->
      Kino.Frame.render(frame, Kino.Markdown.new(error |> Kernel.inspect()))
  end
end)

Kino.Layout.grid([form, frame], boxed: true, gap: 16)
```
